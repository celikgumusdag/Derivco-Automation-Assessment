// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Derivco_Automation_Assessment.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Win")]
    public partial class WinFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Win.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Win", "\tThis feature controlling for spin and win to the slot machine.\r\n\tThis feature us" +
                    "e test data for combinations.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Win With Combinations")]
        [NUnit.Framework.TestCaseAttribute("11100", "60", new string[0])]
        [NUnit.Framework.TestCaseAttribute("11110", "80", new string[0])]
        [NUnit.Framework.TestCaseAttribute("11111", "100", new string[0])]
        [NUnit.Framework.TestCaseAttribute("22200", "120", new string[0])]
        [NUnit.Framework.TestCaseAttribute("22220", "160", new string[0])]
        [NUnit.Framework.TestCaseAttribute("22222", "200", new string[0])]
        [NUnit.Framework.TestCaseAttribute("33300", "180", new string[0])]
        [NUnit.Framework.TestCaseAttribute("33330", "240", new string[0])]
        [NUnit.Framework.TestCaseAttribute("33333", "300", new string[0])]
        [NUnit.Framework.TestCaseAttribute("44400", "240", new string[0])]
        [NUnit.Framework.TestCaseAttribute("44440", "320", new string[0])]
        [NUnit.Framework.TestCaseAttribute("44444", "400", new string[0])]
        [NUnit.Framework.TestCaseAttribute("55500", "300", new string[0])]
        [NUnit.Framework.TestCaseAttribute("55550", "400", new string[0])]
        [NUnit.Framework.TestCaseAttribute("55555", "500", new string[0])]
        public virtual void WinWithCombinations(string testData, string price, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Win With Combinations", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I open page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When(string.Format("I fill test data as \"{0}\"", testData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.When("I spin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then(string.Format("I see won \"{0}\"", price), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
